<!DOCTYPE html>
<html lang="en">
<head>
    <title>axkralj990</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
    <link rel="stylesheet" href="sidebar.css">
    <link rel="stylesheet" href="AK_stylesheet.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Orbitron">
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto Condensed">
</head>
<body style="padding-top: 70px;">

	<nav class="navbar navbar-inverse navbar-fixed-top">
    	<div class="container">

        	<!-- navbar header -->
            <div class="navbar-header">
        		<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#mainNavBar">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                </button>
            	<a href="http://axkralj990.github.io/" class="navbar-brand" id="AK-brand">A-K</a>
            </div>

            <!-- menu -->
            <div class="collapse navbar-collapse" id="mainNavBar">
            	<ul class="nav navbar-nav">
                	<li><a href="http://axkralj990.github.io/">Home</a></li>
                    	<li><a href="about_me.html">About Me</a></li>
                    	<!-- drop down menu -->
                    	<li class="dropdown active">
                    		<a href="#" class="dropdown-toggle" data-toggle="dropdown">Projects<span class="caret"></span></a>
                        	<ul class="dropdown-menu">
                        		<li><a href="quad.html">ATmega Quadcopter</a></li>
                   			<li><a href="SGM_cs.html">Serial Grahing Monitor - C#</a></li>
                            		<li><a href="SGM_python.html">Serial Graphing Monitor - Python</a></li>
                   			<li><a href="AVR_misc.html">Smaller AVR Projects</a></li>
                        	</ul>
                    	</li>
			<li><a href="https://github.com/axkralj990">GitHub Page</a></li>
                </ul>
            </div>
    	</div>
    </nav>

	<div class="container">
    <div class="row">
      <div class="col-md-8">
    <!--<div class="row">-->
    <p>In my senior year of aerospace engineering I got really interested into control systems and airplane stability and control. Since then I've had the desire to design my own
    flight controller. I found quadcopters the most interesting, since they are unstable and pretty much useless without a closed-loop controller. After learning how to program AVRs,
  I got this idea to write the flight controller on the stand-alone ATmega328P chip. This is the same chip Arduino Uno uses. The reason I decided to write the controller diretly on the chip with
C instead of using an Arduino, was that I wanted to gain as much knowledge as possible in writing firmware for embedded systems and Arduino environment hides some of the
low-level functionality by making the enviroment more user-friendly. I still think that Arduino is a great tool for learning microcontrollers, but working directly with the ATmega328 chip leads to better understanding of
 what's under the hood.</p>

<p>When I started programming AVRs, everything seemed really complex and far from being as user-friendly as the Arduino environment. First thing that scared me was that 600+ pages long Atmel's user manual, because that
  is something that you need to refer to the whole time you are writing the code for the chip. After patiently sticking with it for some time it became much friendlier.
As a matter of fact, now I feel much more comfotable programming AVRs than Arduino. I need to mention that
 <a href="http://www.littlehacks.org/avr-programming">Elliot Williams' book AVR Programming</a> helped me the most to break the ice.</p>

<p>In this project I will cover many different topics that are required for the quad flight controller. I will cover how to use the analog to digital converter for scanning the flight battery level,
, I2C (TWI) communication protocol between the MPU6050 inertial measurement unit and the ATmega328P, using timers for time measurement required for reading and writing RC signals and PID control,
EEPROM for storing configuration data, USART for configuration and debugging, and much more. <!-- As you can see quite many topics need to be covered in order to write the flight
controller, that's why I made a separate repository for the programs where I worked on each one of those modules. <a href="AVR_misc.html">This page</a> goes into detail for each one of the modules.--></p>

<p>The controller design was greatly inspired by Joop Brokking's <a href="http://www.brokking.net">Youtube channel</a> and <a href="https://www.youtube.com/user/MacPuffdog/featured">blog</a>.
His YMFC-3D quadcopter video tutorials helped me a lot and I will refer to them often during the project. The quad components are also almost the same as on his YMFC-3D.</p>

<p>I have also used many libraries from other Github users. All references to the authors are under each subsection of the project where the specific library is used.</p>

    </div>
    <div class="col-md-4">
      <div class="panel panel-default">
        <div class="panel-heading">Contents</div>
        <div class="panel-body">
          <ol>
            <li><a href="quad.html">Overview</a></li>
            <li><a href="#versions">Firmware Versions</a></li>
            <li><a href="#serialMonitor">Serial Graphing Monitor</a></li>
            <li><a href="#">Orientation Sensing</a></li>
            <li><a href="#">RC control</a></li>
            <li><a href="#">Quadcopter components</a></li>
            <li><a href="#">Firmware</a></li>
            <li><a href="#">Flight Controller Board</a></li>
            <li><a href="#">Future Improvements</a></li>
          </ol>
        </div>
      </div>
    </div>
    </div>

    <a name="python"></a>

<!--
<h2>Firmware Versions</h2>

<h3>Version 1.0</h3>
<p>As of April 18, 2017, I am working on the very first version of the firmware, so
I will just call it version 1.0.</p>

<p>For the version 1.0 I will use the Arduino Uno board and Adafruit SD
card shield configured with the MPU6050 IMU, receiver inputs and ESC outputs.
Of course I will program the ATmega328P on the Arduino with plain C using
 Atmel Studio and not Arduino's C/C++ dialect. The main reson I am using the Arduino
 for the first version is that I still need to figure out the best way to convert
 the flight battery voltage of about 12V to 5V that the chip needs.
 Another reason for using this hardware configuration is the 16MHz crystal
 oscillator built on the Arduino Uno. Because the flight control requires precise
 time measurements (measurement/generation of RC controll pulses and PID control),
 the internal RC oscillator of the ATmega328P lacks that precission. I realized that
 when I compared pulse lengths from RC receiver with the same code running on
 the Arduino and on the standalone ATmega328P chip. The maximum pulse length
 the Arduino read was exactly 2000ms long, while the standalone chip read
only approximatelly 1800ms.</p>
-->

<a name="serialMonitor"></a>

<!--
<p>I plan on designing the flight controller board myself for later versions,
 but I will have to learn some more about voltage regulators and I will have to
 install the 16MHz crystall oscillator for better time measurements and pulse
 generation.</p>
-->

<h2>Serial Graphing Monitor</h2>

<p>As soon as I started learning about measuring the orientation in space with the MPU6050 IMU, I realized
  I had to make a program that will graph the data sent from the microcontroller to the computer via serial port.
  For that reason I wrote a <a href="#csharp">serial graphing monitor in C#</a>.
  At first<a name="versions"></a> I wrote the <a href="#python">serial graphing monitor in Python 2.7</a>, but later I got the desire to learn C#, so I wrote another one. Both serial graphing programs are described
under projects section</p>

<p>Descriptions of both serial graphing monitors are on the following pages.</p>
<ul>
  <li><a href="SGM_cs.html">Serial Graphing Monitor - C#</a></li>
  <li><a href="SGM_python.html">Serial Graphing Monitor - Python</a></li>
</ul>

<div class="row" style="padding-bottom: 30px;">
  <div class="col-md-6">
  <img src="Monitor.jpg" height="500">
  </div>

  <div class="col-md-6">
    <img src="MonitorC.JPG" height="500">
  </div>
</div>

<div class="row">


<h2>Orientation Sensing</h3>
<p>As I mentioned earlier, the quadcopter is an unstable system without a close-loop control, for this reason it needs some form feedback information
about its orientation or rotation rates. Two of most commonly used modes for quadcopter stabilization are: </p>

<ul>
  <li><b>Rate mode (manual mode)</b></li>
  <p>In rate mode the quadcoper relies on the output from the three-axis gyroscope that measures angular rates about all of the three axis (X - Roll, Y - Pitch, Z - Yaw). When all the controls for roll, pitch
  and yaw are in neutral position, the PID control aims to maintain all the angular rates equal to zero (set-point). When the operator desires to move the quadcopter in any of the three principal axis, he/she
  chages the setpoint to a non-zero value by moving the control stick on the RC transmitter. In order to bring the quadcopter back to level position, the operator has to manually control the quadcopter back
  to level orientation.</p>
  <li><b>Self-level mode (horizont mode).</b></li>
  <p>The self-level mode is much more beginner-friendli than the rate mode, because when all the orientation controls are in neutral positions, the PID control maintains all the angles about
  the principal axis equal to zero. This means that if the controls are in neutral positions, the quadcopter will remain level. Self-level control is achieved by reading the angular rates from the
gyroscope and acceleration from the accelerometer. By combining both readings with a fusion filter (explained later), the orientation about the principal axis can be calculated. The PID controler then
aims to maintain the orientation angles equal to zero.</p>
</ul>

<p> For my first flight controller I decided to go with the <b>rate-mode</b>, even though I am using the MPU6050 IMU, which contains both, an accelerometer and a gyroscope. Once I get everything working
  well, I will consider implementing the self-level mode.</p>


  <p><h3>1. Quadcopter Body Axis</h3></p>
  <p>Figure below shows the definition aircraft's body axis used in aicraft dynamics. I will refer to this coordinate system throught the entire project.</p>

  <img src="Axis_rates.jpg" height="300">

  <p>The angular rates of the aircraft will be denoted as P for the angular rate around the X axis, Q around the Y axis and R around the Z axis. I will use &deg;/s for the units for the angular rates.</p>

  <p><h3>2. MPU6050 IMU</h3></p>
  <p> MPU6050 is a 6-dof (degree of freedom) inertial measurement unit (IMU), which means that it's a board that contains a 3-axis accelerometer and a 3-axis gyroscope, hence the 6-dof. There are also 9-dof IMUs that
    contain a 3-axis magnetometer as well (MPU-9060). The board is probably the most commonly used IMU for DIY projects
    (Arduino, Raspberry Pi,...).</p>
  
    <img src="mpu6050.JPG" height="300">

  <p>Below are some relevant specifications for the MPU6050. More can be found in the <a href="https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf">datasheet</a></p>.

    <img src="GyroData.JPG" width="500">

    <p>From the data shown above it is important to note the value of the FS_SEL register, since that determines the sensitivity and the range of the gyro, the information we need if we want to interpret the data read from the registers as angular rate. Gyroscope ADC word length is 16 bit long, which means that the reading will be store in two separate 8-bit registers, from which we will have to read it with I2C communication protocol that I will briefly explain next.</p>
    <p><a href="https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Register-Map1.pdf">MPU6050's register map</a> is another required document for establishing the communication with the chip.</p>
  <p><h3>3. I2C Communication</h3></p>
  <p>...Breif explanation of I2C protocol...</p>
  <p>I always like to test and visualize things that I work with, so I couldn't help myself and had to buy a cheap oscilloscope (Hantek 6022BE, as recommended by <a href="https://www.youtube.com/watch?v=ibYA229U08w&t=283s">Joop Brokking</a>) in order to see what is going on inside the wires when the devices talk to each other.</p>

  <img src="i2c_Data_notations.png" height="500">
  <img src="i2c_Data_ard_notations.png" height="500">


<h2>Libraries for ATmega328 and Arduino</h2>
<p><h3>1. AK_MPU6050_lib for ATmega328: </h3> I am working on a library to use MPU6050 IMU with ATmega328P chip. As of September 19, 2016 the library contains the following functions:</p>

<ul>
  <li>MPU6050_init()</li>
  <li>MPU6050_test_I2C()</li>
  <li>MPU6050_get_accel()</li>
  <li>MPU6050_get_gyro()</li>
  <li>MPU6050_set_sleepMode()</li>
  <li>MPU6050_set_gyroFS()</li>
  <li>MPU6050_set_accelFS()</li>
  <li>MPU6050_set_clockSource()</li>
</ul>

<p>The AK_MPU6050_lib uses <a href="https://github.com/g4lvanix/I2C-master-lib">I2c-master-lib by g4lvanix</a> for I2C communication with the MPU6050 chip.</p>

<h3>2. USART library for ATmega328: </h3>

<p>This is a slightly modified version of a USART library written by Elliot Williams for his <a href="http://www.littlehacks.org/avr-programming">AVR Programming book</a>.</p>

<h2>Quadcopter Components</h2>

<p>I have finally received all the components for the quad. I bought almost everything from <a href="http://www.brokking.net/ymfc-al_main.html">Brokking's list</a> for his YMFC-3D AL quadcopter. Links to each part at dx.com are on his website. The only thing I bought in my local RC store was the LiPo charger and the batttery, since LiPo batteries could not be shipped to EU from dx.net.</p>

<p>First problem I ran into was that I had no idea on how to work with LiPo batteries, since they be quite dangerous if not handled properly. <a href="http://www.tjinguytech.com/charging-how-tos">This link</a> taught me all I needed for now.</p>

<p>I have also bought all the miscallaneous components, such as heat-shrink tubes, various cables, etc. I will be posting the complete parts list soon.</p>

<p>Author: alex.kraljic@gmail.com</p>

<p>There is still a lot to fix, add, and improve, so any suggestions and corrections are welcome!</p>
</div>
<!--</div>-->
	<hr>
      <footer>
        <p>&copy; 2017 Aleksij Kraljic <i class="fa fa-space-shuttle"></i></p>
      </footer>
    </div> <!-- /container -->
</body>
</html>
